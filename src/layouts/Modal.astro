---
const { modalName } = Astro.props;
---

<div
  id=`modal-${modalName}`
  data-which-modal={modalName}
  class="[&.active]: pointer-events-none fixed top-0 left-0 z-0 flex h-svh w-full items-center justify-center bg-black/95 opacity-0 [&.active]:pointer-events-auto [&.active]:z-100 [&.active]:opacity-100"
  inert
>
  <slot />
</div>

<script>
  import { fade } from "astro:transitions";
  import {
    navModalStore,
    fetchProcessingModalStore,
    fetchSuccessModalStore,
    fetchErrorModalStore,
    askPasswordModalStore,
    deleteMessageCompleteModalStore,
    deleteMessageErrorModalStore,
  } from "../common/stores";

  navModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-nav") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  fetchProcessingModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-fetch-processing") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  fetchSuccessModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-fetch-success") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  fetchErrorModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-fetch-error") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  askPasswordModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-ask-password") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  deleteMessageCompleteModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-delete-message-complete") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });
  deleteMessageErrorModalStore.subscribe((isModalOpen) => {
    const element = document.querySelector("#modal-delete-message-error") as HTMLElement;
    if (element) {
      updateModal(element, isModalOpen);
    }
  });

  function updateModal(element: HTMLElement, boolean: boolean) {
    if (boolean) {
      element.classList.add("active");
      element.removeAttribute("inert");
    } else {
      element.classList.remove("active");
      element.setAttribute("inert", "");
    }
    updateFixedScreen(boolean);
  }

  function updateFixedScreen(boolean: boolean) {
    if (boolean) {
      document.body.style.cssText = `
    position: fixed;
    top: -${window.scrollY}px;
    overflow-y: scroll;
    width: 100%;`;
    } else {
      const scrollY = document.body.style.top;
      document.body.style.cssText = "";
      window.scrollTo(0, parseInt(scrollY || "0", 10) * -1);
    }
  }
</script>
