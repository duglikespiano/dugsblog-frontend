---
import { Icon } from "astro-icon/components";
---

<div class="fixed right-[50px] bottom-[50px] h-[75px] w-[75px]" data-menu-button>
  <div class="relative h-full w-full">
    <button
      class="hover:text-green1 bg-green1 absolute top-[50%] left-[50%] h-full w-full -translate-x-[50%] -translate-y-[50%] cursor-pointer rounded-[50%] border-2 border-white p-2 duration-200 hover:bg-white"
      role="button"
      tabindex="0"
      aria-label="Toggle menu"
    >
      <div class="relative h-full w-full">
        <Icon
          class="absolute top-[50%] left-[50%] h-full w-full -translate-x-[50%] -translate-y-[50%] rounded-[50%]"
          name="tabler:list"
          data-menu-button-icon="to-open"
        />
        <Icon
          class="absolute top-[50%] left-[50%] hidden h-full w-full -translate-x-[50%] -translate-y-[50%] rounded-[50%]"
          name="tabler:x"
          data-menu-button-icon="to-close"
        />
      </div>
    </button>
    <div class="absolute top-[50%] left-[50%] z-[-10] h-full w-full -translate-x-[50%] -translate-y-[50%]">
      <div class="relative h-full w-full">
        <button
          class="pointer-events-none absolute top-[50%] left-[50%] flex h-full w-full -translate-x-[50%] -translate-y-[50%] cursor-pointer items-center justify-center transition-opacity"
          data-menu-button-menu
          data-menu-button-menu1
        >
          <p
            class="hover:text-green1 bg-green1 flex h-full w-full items-center justify-center rounded-[50%] border-2 border-white text-sm duration-200 hover:bg-white"
          >
            <!-- 한글/日本語 
            한글/Eng  -->
            Eng
          </p>
        </button>
        <button
          class="pointer-events-none absolute top-[50%] left-[50%] flex h-full w-full -translate-x-[50%] -translate-y-[50%] cursor-pointer items-center justify-center transition-opacity"
          data-menu-button-menu
          data-menu-button-menu2
        >
          <p
            class="hover:text-green1 bg-green1 flex h-full w-full items-center justify-center rounded-[50%] border-2 border-white text-sm duration-200 hover:bg-white"
          >
            <!-- 한글/日本語 
            한글/Eng  -->
            日本語
          </p>
        </button>
        <button
          class="pointer-events-none absolute top-[50%] left-[50%] flex h-full w-full -translate-x-[50%] -translate-y-[50%] cursor-pointer items-center justify-center transition-opacity"
          data-menu-button-menu
          data-menu-button-menu3
        >
          <p
            class="hover:text-green1 bg-green1 flex h-full w-full items-center justify-center rounded-[50%] border-2 border-white p-4 duration-200 hover:bg-white"
          >
            <Icon name="cil:sun" class="h-full w-full" />
          </p>
        </button>
        <button
          class="pointer-events-none absolute top-[50%] left-[50%] flex h-full w-full -translate-x-[50%] -translate-y-[50%] cursor-pointer items-center justify-center transition-opacity"
          data-menu-button-menu
          data-menu-button-menu4
        >
          <p
            class="hover:text-green1 bg-green1 flex h-full w-full items-center justify-center rounded-[50%] border-2 border-white p-4 duration-200 hover:bg-white"
          >
            <Icon name="cil:arrow-top" class="h-full w-full" />
          </p>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { SplitText } from "gsap/SplitText";
  gsap.registerPlugin(ScrollTrigger, SplitText);

  let isMenuButtonOpen = false;

  const menuButton = document.querySelector("[data-menu-button]") as HTMLElement;

  const menuButtonMenuElements = document.querySelectorAll("[data-menu-button-menu]");

  const buttonsPosition = {
    open: [
      { x: -100, y: 0 },
      { x: -180, y: 0 },
      { x: -75, y: -75 },
      { x: 0, y: -100 },
    ],
    close: [
      { x: 0, y: 0 },
      { x: 0, y: 0 },
      { x: 0, y: 0 },
      { x: 0, y: 0 },
    ],
  };

  const openMenuTimeline = gsap.timeline({ paused: true });
  const closeMenuTimeline = gsap.timeline({ paused: true });

  menuButtonMenuElements.forEach((element, i) => {
    openMenuTimeline.to(
      `[data-menu-button-menu${i + 1}]`,
      {
        x: buttonsPosition.open[i].x,
        y: buttonsPosition.open[i].y,
        opacity: 1,
        pointerEvents: "auto",
        duration: 0.2,
        ease: "none",
      },
      0,
    );
  });
  menuButtonMenuElements.forEach((element, i) => {
    closeMenuTimeline.to(
      `[data-menu-button-menu${i + 1}]`,
      {
        x: buttonsPosition.close[i].x,
        y: buttonsPosition.close[i].y,
        opacity: 0,
        pointerEvents: "none",
        duration: 0.2,
        ease: "none",
      },
      0,
    );
  });

  const openMenuIcons = () => {
    if (!isMenuButtonOpen) {
      openMenuTimeline.restart();
    } else {
      closeMenuTimeline.restart();
    }
  };

  menuButton.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).dataset.menuButtonMenu === undefined) {
      openMenuIcons();
      isMenuButtonOpen = !isMenuButtonOpen;
    }
  });
</script>
