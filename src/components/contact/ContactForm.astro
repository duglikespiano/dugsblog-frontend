---
import CompleteModal from "./CompleteModal.astro";
import ProcessingModal from "./ProcessingModal.astro";
---

<div id="contact-form" class="mx-auto max-w-2xl">
  <div class="text-rosewater mb-5 text-5xl font-bold">Contact</div>
  <form class="mt-5 flex flex-col flex-wrap rounded-4xl border-4 p-5" data-contact-form>
    <fieldset class="flex flex-col gap-2 md:gap-4">
      <div class="flex flex-col">
        <label class="text-rosewater mt-2 text-3xl font-bold sm:text-4xl">Name</label>
        <input
          data-input-element
          class="contact-input placeholder-green1 placeholder:text-1xl h-12 rounded-md border-4 bg-white pr-4 pl-4 text-gray-800 placeholder:font-bold placeholder:opacity-50"
          type="text"
          id="name"
          name="name"
          maxlength="40"
          placeholder="Your name"
          autocomplete="off"
        />
        <p data-error-name class="hidden pl-1 leading-none text-red-500">need to input name</p>
      </div>
      <div class="flex flex-col">
        <label class="text-rosewater mt-2 text-3xl font-bold sm:text-4xl">Email</label>
        <input
          data-input-element
          class="contact-input placeholder-green1 placeholder:text-1xl h-12 rounded-md border-4 bg-white pr-4 pl-4 text-gray-800 placeholder:font-bold placeholder:opacity-50"
          type="email"
          id="email"
          name="email"
          maxlength="40"
          placeholder="Your email"
          autocomplete="off"
        />
        <p data-error-email data-error-email-regex class="hidden pl-1 leading-none text-red-500">email error</p>
        <p data-error-email class="hidden pl-1 leading-none text-red-500">need to input email</p>
      </div>
      <div class="flex flex-col">
        <label class="text-rosewater mt-2 text-3xl font-bold sm:text-4xl">Message</label>
        <textarea
          data-input-element
          class="contact-input placeholder-green1 placeholder:text-1xl h-40 resize-none rounded-md border-4 bg-white p-4 text-gray-800 placeholder:font-bold placeholder:opacity-50"
          id="message"
          name="message"
          maxlength="3000"
          placeholder="Your Message"></textarea>
        <p data-error-message class="hidden pl-1 leading-none text-red-500">need to input message</p>
      </div>
    </fieldset>

    <button
      class="bg-rosewater mx-auto mt-4 flex w-full cursor-not-allowed flex-col items-center justify-center rounded-md px-18 py-1.5 font-bold md:w-auto"
      type="submit"
      data-contact-form-button
    >
      Submit
    </button>
  </form>
  <ProcessingModal />
  <CompleteModal />
</div>

<script>
  import { contactFormStore, isModalOpenStore } from "../../common/stores";

  const contactForm = document.querySelector("[data-contact-form]") as HTMLFormElement;
  const submitButton = document.querySelector("[data-contact-form-button]") as HTMLButtonElement;

  function isValidEmail(email: string): boolean {
    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email);
  }

  function disableButton() {
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.classList.add("opacity-50", "cursor-not-allowed");
      submitButton.classList.remove("cursor-pointer");
    }
  }

  function enableButton() {
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.classList.remove("opacity-50", "cursor-not-allowed");
      submitButton.classList.add("cursor-pointer");
    }
  }

  function checkIfStringEmpty(value: string) {
    return value === "" || value === null || value === undefined;
  }

  function updateInputBorder(target: HTMLElement, boolean: boolean) {
    if (boolean) {
      target.classList.add("border-red-500");
    } else {
      target.classList.remove("border-red-500");
    }
  }

  function updateErrorMessagesDisplay(errorMessages: NodeListOf<Element>, boolean: boolean, value: string = "") {
    if (boolean) {
      errorMessages.forEach((message) => message.classList.remove("hidden"));
    } else {
      errorMessages.forEach((message) => {
        message.classList.add("hidden");
        const messageElement = message as HTMLElement;
        if ("errorEmailRegex" in messageElement.dataset && !isValidEmail(value)) {
          messageElement.classList.remove("hidden");
        }
      });
    }
  }

  function resetInputs() {
    document.querySelectorAll("[data-input-element]").forEach((inputElement) => {
      disableButton();
      const test = inputElement as HTMLInputElement;
      test.value = "";
    });
  }
  //
  //
  document.querySelectorAll("[data-input-element]").forEach((input) => {
    input.addEventListener("input", (event) => {
      const target = event.target as HTMLInputElement;
      const id = target.id;
      const value = target.value;
      const trimmedValue = value.trim();
      let areAllValuesValid = false;
      let areAllValuesFilled = true;
      contactFormStore.set({
        ...contactFormStore.get(),
        [id]: value,
      });

      const storeValues = Object.values(contactFormStore.get());

      for (const key in storeValues) {
        if (checkIfStringEmpty(storeValues[key])) {
          areAllValuesFilled = false;
          break;
        }
      }

      if (areAllValuesFilled && isValidEmail(contactFormStore.get().email)) {
        areAllValuesValid = true;
      }

      const errorMessages = document.querySelectorAll(`[data-error-${id}]`);
      if (trimmedValue === "") {
        updateInputBorder(target, true);
        updateErrorMessagesDisplay(errorMessages, true);
      } else {
        updateInputBorder(target, false);
        updateErrorMessagesDisplay(errorMessages, false, value);
      }

      if (areAllValuesValid) {
        enableButton();
      } else {
        disableButton();
      }
    });
  });
  //
  //
  document.querySelectorAll("[data-input-element]").forEach((input) => {
    input.addEventListener("blur", (event) => {
      const target = event.target as HTMLInputElement;
      const id = target.id;
      const value = target.value;
      const trimmedValue = value.trim();
      const errorMessages = document.querySelectorAll(`[data-error-${id}]`);
      if (trimmedValue === "") {
        updateInputBorder(target, true);
        updateErrorMessagesDisplay(errorMessages, true);
      }
    });
  });
  //
  //
  contactForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    console.log(contactFormStore.get());

    // const previousStore = isModalOpenStore.get();
    // isModalOpenStore.set({
    //   ...previousStore,
    //   "contact-process": true,
    // });

    // setTimeout(() => {
    //   const previousStore = isModalOpenStore.get();
    //   isModalOpenStore.set({
    //     ...previousStore,
    //     "contact-process": false,
    //     "contact-complete": true,
    //   });
    //   resetInputs();
    // }, 2000);
  });
  //
  //
  disableButton();
  const previousStore = isModalOpenStore.get();
  isModalOpenStore.set({
    ...previousStore,
    // "contact-process": true,
    "contact-complete": true,
  });
</script>
