---
import { componentTitles, guestbook } from "../../common/htmlElements";
import type { Languages } from "../../common/types";
const { language } = Astro.params as { language: Languages };
const componentTitle = componentTitles["guestbook"][language];
---

<div
  id="guestbook-form"
  class="after:bg-green2 dark:after:bg-gray3 relative pb-15 after:absolute after:bottom-0 after:left-[50%] after:block after:h-0.5 after:w-full after:translate-x-[-50%] after:content-['']"
>
  <h2 class="text-green2 dark:text-rosewater mb-5 text-2xl font-extrabold">{componentTitle}</h2>
  <form
    class="dark:border-gray3 border-green2 dark:bg-green1 bg-rosewater relative z-10 mt-5 flex flex-col flex-wrap rounded-4xl border-4 p-5"
    data-guestbook-form
  >
    <fieldset class="flex flex-col gap-2 md:gap-4">
      <div class="flex flex-col">
        <label class="text-green1 mt-2 text-xl font-bold dark:text-gray-300">{guestbook["name"][language]}</label>
        <input
          data-input-element
          class="contact-input border-gray3 bg-gray3 mt-1 h-12 rounded-md border-3 pl-2 text-slate-950 placeholder-slate-950 placeholder:text-sm placeholder:font-bold placeholder:opacity-50 sm:pr-4 sm:pl-4"
          type="text"
          id="name"
          name="name"
          maxlength="40"
          placeholder={guestbook["namePlaceholder"][language]}
          autocomplete="off"
        />
        <p data-error-name class="mt-1 hidden pl-1 text-sm leading-none text-red-500">
          {guestbook["nameError"][language]}
        </p>
      </div>
      <div class="flex flex-col">
        <label class="text-green1 mt-2 text-xl font-bold dark:text-gray-300"
          >{guestbook["password"][language]}<span
            class="ml-2 block text-[12px] text-orange-600 sm:inline dark:text-rose-300"
            >*{guestbook["passwordDescription"][language]}</span
          >
        </label>
        <input
          data-input-element
          class="contact-input border-gray3 bg-gray3 mt-1 h-12 rounded-md border-3 pl-2 text-slate-950 placeholder-slate-950 placeholder:text-sm placeholder:font-bold placeholder:opacity-50 sm:pr-4 sm:pl-4"
          type="password"
          id="password"
          name="password"
          maxlength="40"
          placeholder={guestbook["passwordPlaceholder"][language]}
          autocomplete="off"
        />
        <p data-error-password class="mt-1 hidden pl-1 text-sm leading-none text-red-500">
          {guestbook["passwordError"][language]}
        </p>
      </div>

      <div class="flex flex-col">
        <label class="text-green1 mt-2 text-xl font-bold dark:text-gray-300">{guestbook["message"][language]}</label>
        <textarea
          data-input-element
          class="contact-input border-gray3 bg-gray3 mt-1 h-40 resize-none rounded-md border-3 p-2 text-slate-950 placeholder-slate-950 placeholder:text-sm placeholder:font-bold placeholder:opacity-50 sm:p-4"
          id="message"
          name="message"
          maxlength="3000"
          placeholder={guestbook["messagePlaceholder"][language]}></textarea>
        <p data-error-message class="mt-1 hidden pl-1 text-sm leading-none text-red-500">
          {guestbook["messageError"][language]}
        </p>
      </div>
    </fieldset>

    <button
      class="dark:bg-rosewater bg-green2 mt-4 flex w-full cursor-pointer flex-col items-center justify-center rounded-md px-18 py-1.5 font-bold"
      type="submit"
      data-guestbook-form-button
    >
      {guestbook["submit"][language]}
    </button>
  </form>
</div>

<script>
  import { messageCreatedModalStore } from "../../common/stores";
  import { guestbookFormStore, guestbookMessagesStore, fetchProcessingModalStore } from "../../common/stores";

  const guestbookForm = document.querySelector("[data-guestbook-form]") as HTMLFormElement;

  function checkIfStringEmpty(value: string) {
    return value === "" || value === null || value === undefined;
  }

  function updateInputBorder(target: HTMLElement, boolean: boolean) {
    if (boolean) {
      target.classList.add("border-red-500");
    } else {
      target.classList.remove("border-red-500");
    }
  }

  function updateErrorMessagesDisplay(errorMessages: NodeListOf<Element>, boolean: boolean, value: string = "") {
    if (boolean) {
      errorMessages.forEach((message) => message.classList.remove("hidden"));
    } else {
      errorMessages.forEach((message) => message.classList.add("hidden"));
    }
  }

  function resetInputs() {
    document.querySelectorAll("[data-input-element]").forEach((inputElement) => {
      const input = inputElement as HTMLInputElement;
      input.value = "";
    });
  }
  //
  //
  document.querySelectorAll("[data-input-element]").forEach((input) => {
    input.addEventListener("input", (event) => {
      const target = event.target as HTMLInputElement;
      const id = target.id;
      const value = target.value;
      const trimmedValue = value.trim();
      let areAllValuesFilled = true;
      guestbookFormStore.set({
        ...guestbookFormStore.get(),
        [id]: value,
      });

      const storeValues = Object.values(guestbookFormStore.get());

      for (const key in storeValues) {
        if (checkIfStringEmpty(storeValues[key])) {
          areAllValuesFilled = false;
          break;
        }
      }

      const errorMessages = document.querySelectorAll(`[data-error-${id}]`);
      if (trimmedValue === "") {
        updateInputBorder(target, true);
        updateErrorMessagesDisplay(errorMessages, true);
      } else {
        updateInputBorder(target, false);
        updateErrorMessagesDisplay(errorMessages, false, value);
      }
    });
  });
  //
  //
  document.querySelectorAll("[data-input-element]").forEach((input) => {
    input.addEventListener("blur", (event) => {
      const target = event.target as HTMLInputElement;
      const id = target.id;
      const value = target.value;
      const trimmedValue = value.trim();
      const errorMessages = document.querySelectorAll(`[data-error-${id}]`);
      if (trimmedValue === "") {
        updateInputBorder(target, true);
        updateErrorMessagesDisplay(errorMessages, true);
      }
    });
  });
  //
  //
  guestbookForm?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = guestbookFormStore.get();
    type guestbookFormKeys = "name" | "password" | "message";
    const invalidInputs = (Object.keys(formData) as guestbookFormKeys[])
      .filter((key) => formData[key] === "")
      .map((key) => key);

    if (invalidInputs.length !== 0) {
      invalidInputs.forEach((invalidInput) => {
        updateErrorMessagesDisplay(document.querySelectorAll(`[data-error-${invalidInput}]`), true);
      });
    } else {
      fetchProcessingModalStore.set(true);
      const fetchResult = await fetch(`${import.meta.env.PUBLIC_BACKEND_URI}/guestbook`, {
        method: "post",
        headers: {
          "Content-type": "application/json",
        },
        body: JSON.stringify(guestbookFormStore.get()),
      });
      const data = await fetchResult.json();
      const { id, created_at } = data;

      setTimeout(() => {
        guestbookMessagesStore.set([
          {
            id: id,
            name: guestbookFormStore.get().name,
            message: guestbookFormStore.get().message,
            created_at: created_at,
          },
          ...guestbookMessagesStore.get(),
        ]);
        fetchProcessingModalStore.set(false);
        messageCreatedModalStore.set(true);
        resetInputs();
      }, 1000);
    }
  });
  //
  //
</script>
